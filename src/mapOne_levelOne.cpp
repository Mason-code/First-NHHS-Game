#include "mapOne_levelOne.h"
#include <iostream>
#include <vector>
#include "tile_map.h" 
#include <SFML/Graphics.hpp>


// dont forget to define declared variables as extern in the header

/*
std::vector<int> level = {
    3, 3, 3, 3, 3,
    3, 3, 3, 3, 3,
    3, 3, 3, 3, 3,
    3, 3, 3, 3, 3,
    3, 3, 3, 3, 3
};

TileMap map;



std::vector<int> level_dos(752, 72); // Initializes with 752 elements, each set to 72
TileMap MapLayer;

*/




std::vector<int> border = {
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 18, 18, 19, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 72, 0, 0, 68, 19, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 0, 0, 0, 0, 35, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 17, 18, 18, 18, 18, 49, 50, 0, 0, 50, 51, 69, 19, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 33, 0, 0, 0, 0, 65, 66, 0, 0, 66, 67, 0, 35, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 69, 19, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 44, 28, 18, 29, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 33, 0, 0, 0, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 33, 0, 0, 0, 35, 69, 69, 69, 69, 69, 69, 45, 0, 0, 17, 70, 70, 19, 0, 0,
    0, 0, 0, 0, 0, 0, 49, 50, 0, 50, 51, 0, 0, 0, 0, 0, 0, 68, 69, 71, 72, 0, 0, 35, 0, 0,
    0, 0, 0, 0, 0, 0, 65, 66, 0, 66, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 69, 19,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0




};

TileMap mapBorder;


std::vector<int> floorR{
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 17, 18, 18, 19, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 68, 19, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 33, -1, -1, -1, -1, 35, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, 17, 18, 18, 18, 18, 49, 50, -1, -1, 50, 51, 69, 19, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, 33, -1, -1, -1, -1, 65, 66, -1, -1, 66, 67, -1, 35, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, 57, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 35, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, 33, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 68, 69, 19, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, 44, 28, 18, 29, 19, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 42, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, 33, -1, -1, -1, 26, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 35, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, 33, -1, -1, -1, 35, 69, 69, 69, 69, 69, 69, 45, -1, -1, 17, 70, 70, 19, -1, -1,
    -1, -1, -1, -1, -1, -1, 49, 50, -1, 50, 51, -1, -1, -1, -1, -1, -1, 68, 69, 71, 72, -1, -1, 35, -1, -1,
    -1, -1, -1, -1, -1, -1, 65, 66, 0, 66, 67, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 35, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 35, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 35, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 35, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 68, 69, 19,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 35,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1




};


TileMap mapFloor;



std::vector<int> moving{
    6, 7, 3, 54,   
    12, 32, 34, 50, 
    64, 42, 63, 58,  
    93, 36, 24, 52
}; // Animated tiles

std::vector<int> animData{
    1, 0, 1, 0,   // Static tile (no animation)
    3, 0, 1, 200, // Animated tile with 3 frames, 200ms per frame
    1, 0, 1, 0,   // Static tile
    1, 0, 1, 0    // Static tile
};


TileMap anim;

void getMap() {
    int heightOne = 23;
    if (!mapBorder.load("../src/assets/Texture/TX_Tileset_Wall.png", { 32, 32 }, border.data(), nullptr, {}, border.size() / heightOne, heightOne)) {
        std::cout << "Failed to load map!" << std::endl;
    }

    int heightTwo = 23;
    if (!mapFloor.load("../src/assets/Texture/TX_Tileset_Grass.png", { 32, 32 }, floorR.data(), nullptr, {}, floorR.size() / heightTwo, heightTwo)) {
        std::cout << "Failed to load map!" << std::endl;
    }

    int heightTres = 4;
    if (!anim.load("../src/assets/Texture/TX_Tileset_Grass.png", { 32, 32 }, moving.data(), nullptr, animData, moving.size() / heightTres, heightTres)) {
        std::cout << "Failed to load map!" << std::endl;
    }
}
